package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"
	"time"
)

type nagiosHost struct {
	Name string
}

type nagiosService struct {
	Description string
	Host        *nagiosHost
}

type nagiosConfig struct {
	Hosts       []*nagiosHost
	Services    []*nagiosService
	BaseService string
	BaseHost    string
	CfgPath     string
}

func (cfg *nagiosConfig) addHost(host *nagiosHost) {
	cfg.Hosts = append(cfg.Hosts, host)
}

func (cfg *nagiosConfig) addService(service *nagiosService) {
	cfg.Services = append(cfg.Services, service)
}

func (cfg *nagiosConfig) render() error {
	var err error
	file, err := ioutil.TempFile(filepath.Dir(cfg.CfgPath), "monsul")
	if err != nil {
		return err
	}
	_, err = fmt.Fprintf(file, "# This file was automatically generated by %s at %s.\n"+
		"# Manual changes will be overwritten!\n", os.Args[0], time.Now().Format(time.RFC1123Z))
	if err != nil {
		return err
	}
	template, err := template.New("cfg").Parse(`
{{range .Hosts}}define host {
  use {{$.BaseHost}}
  host_name {{.Name}}
}

{{end}}
{{range .Services}}
define service {
  use {{$.BaseService}}
  host_name {{.Host.Name}}
  service_description {{.Description}}
}

{{end}}
`)
	if err != nil {
		return err
	}
	err = template.Execute(file, cfg)
	if err != nil {
		return err
	}
	err = file.Close()
	if err != nil {
		return err
	}
	err = os.Rename(file.Name(), cfg.CfgPath)
	if err != nil {
		return err
	}
	return nil
}
